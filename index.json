[{"categories":["MISC"],"contents":"排名 战队名称：第225名\n解题思路 1、解压管道压缩包得到一张图片\n2、将图片用StegSolve打开，不断查看图片各个通道，会发现在单色0通道上左上角出现白色条纹，却中间图案非常混杂，即可得知在图片的混杂数据。\n打开analyse的data extract 选择red 0 Column参数，点击Preview\n第一行即出现flag\nflag{098 8f2a657d8936a76876d4f39f7d7a0} 图片文件：\nhttps://wwcb.lanzouw.com/i9qgI0y5a17i ","date":"2023-06-03T18:19:13+08:00","permalink":"https://hellciw.github.io/post/codebreakers%E6%88%98%E9%98%9F-writeup/","section":"post","tags":null,"title":"Codebreakers战队 WriteUp"},{"categories":["ICMP"],"contents":" Q: 结合实例“ping www.sina.com”给出 ping 命令的原理。\nPing命令是一种常用的网络诊断工具，可以检测主机之间的联通性，测试网络连接速度和带宽使用情况。该命令发送一个数据包到目标主机，然后等待该主机响应，并记录来自目标主机的回复时间和信息，以供分析使用。\n例如，在命令行中运行“ping www.sina.com”，我们可以看到我们的计算机向新浪网站发送了一个数据包，网站以回复给我们，这里如果想更准确的说明原理，我们需要在网络模型中进行解释，简化地将其分为以下几个步骤：\n应用层：用户在终端设备输入ping命令并按下回车，操作系统通过应用层协议将输入的命令传递给传输层。\n传输层：操作系统通过传输层协议将ping命令和其他必要信息打包成域数据报并发往底层网络。此处一般使用ICMP协议。\n网络层：DNS服务负责将www.sina.com解析为其对应的IP地址，并告诉我们的计算机。\n数据链路和物理层：数据包被转化为数据流，并在网络上通过一系列数据链路和物理层传输，最终抵达目标主机。\n目标主机收到数据包，操作系统将回复包打包成数据帧并通过网络发往我们的计算机。\n返回数据经过数据链路和物理层传输，最终抵达我们的计算机，操作系统将其解析为人们可读的格式并在命令行中输出。\nPing命令利用了ICMP数据报协议，通过给目标主机发送数据包和等待其回复，来检测网络连接和其他问题的存在，并记录网络性能以供诊断使用。\n","date":"2023-05-27T22:19:13+08:00","permalink":"https://hellciw.github.io/post/ping%E5%91%BD%E4%BB%A4/","section":"post","tags":null,"title":"ICMP数据报ping命令"},{"categories":["ICMP"],"contents":" Q: 结合实例“tracert www.163.com”给出 tracert 命令的原理。\ntracert命令是一款常用的网络诊断工具，它可以追踪Internet上从一个起始点到达另一个目的地的路由路径，并显示每个跃点的延迟时间。当我们执行“tracert www.163.com”的时候，操作系统就会发送一系列的数据包探测从本机到目标地址的路由，其中包括访问的每个信号跳跃点的详细信息。接下来，我将简要介绍一下“tracert”命令的原理。\n应用层：用户在终端设备输入tracert命令并按下回车，操作系统通过应用层协议将输入的命令传递给传输层。\n传输层：操作系统通过传输层协议将tracert命令和其他必要信息打包成域数据报并发往底层网络。此处一般使用ICMP协议。\n网络层：DNS服务负责将www.163.com解析为其对应的IP地址，并告诉我们的计算机。\n数据链路和物理层：数据包被转化为数据流，并在网络上通过一系列数据链路和物理层传输，最终抵达目标主机。\n目标主机收到数据包并返回结果，但是这个时候 tracert 命令不会停止工作；删除不在路由路径中的信息，并继续向远程主机发送数据包。当跃点信息关于目标系统返回时，则显示到终端上。\n返回数据经过数据链路和物理层传输，最终抵达我们的计算机，操作系统将其解析为人们可读的格式并在命令行中输出。\n总之，“tracert”命令利用ICMP协议特别设计的“时间超时”机制，通过发送数据包，跟踪这些数据包经过的每个路由器，最终确定到达目标地址所需的最佳路线。逐级探测路由器的原理是基于TTL值（Time to Live），它告诉路由跳出期限已过期的报文需要被丢弃。该信息源于每个传输包中的IP头部，一开始被设定成一定的值，中转节点的路由器在收到此类数据包后，会减1并再次转发给下一跃点，这样每一个中转节点就会更新TTL值，直到最后一个到达目的地址。这些来回传输的数据包的交互过程显示了网络连接的性能和路由可能出现的问题，帮助管理员更好地诊断和修复网络问题。\n","date":"2023-05-27T22:19:13+08:00","permalink":"https://hellciw.github.io/post/tracert%E5%91%BD%E4%BB%A4/","section":"post","tags":null,"title":"ICMP数据报tracert命令"},{"categories":[" 网安学习"],"contents":"网络安全学习路线 一、BurpSuite学习 1、使用浏览器给burp代理，进行拦截，获得数据，然后改文件名字或者MIME，达到符合前后端的过滤要求，等文件成功传输到后端，再用菜刀链接。\n2、用BurpSuite扫描网站可以知道有哪些漏洞\n二、CIFS服务器（类似ftp服务器） 打开cmd，输入\\，打开CIFS，输入ip即可\n三、 DHCP部署和安全 DHCP作用（自动分配IP地址） 地址池/作用域：（IP，子网掩码，网关，DNS，租期）， DHCP优点：减少工作量，避免IP冲突，提高地址利用率\nDHCP 协议端口是:UDP 67,68 DHCP原理（DHCP租约过程） 分为4个步骤：\n1）发送DHCP Discovery 广播包 客户机广播请求IP地址（包含客户机的MAC地址）\n2）响应DHCP Offer广播包 服务器响应提供的IP地址（但无子网掩码、网关等参数）\n3）发送DHCP Request广播包 客户机选择IP（也可认为确认使用哪个IP）\n4）服务器发送DHCP ACK 广播包 服务器确定了租约，并提供网卡详细参数IP、掩码，网关、DNS、租期等\nDHCP续约 50%时间过后，客户机会再次发送DHCP Request包，进行续约，如果服务器无响应，则继续使用并在87.5%，再次发送DCHP Request包，进行续约，如X任然无响应，并释放IP地址，及重新发送DHCP Discovery 广播包来获取IP地址，当无任何服务器响应是，自动给自己分配一个169.254.x.x/16，全球统一无效地址，用于临时内网通信！\n部署DHCP服务器 客户机验证：\nipconfig /release 释放IP（取消租约，或者改为手动配置IP,也可以释放租约）\ripconfig /renew 重新获取IP（有IP时，发送Request续约，无IP时，发送Discovery重新获取） 地址保留 对指定的MAC地址，固定动态分配IP地址\nDHCP 攻击与防御 1）攻击DHCP服务器： 频繁的发送伪装DHCP请求，直到将DHCP地址池资源耗尽\n防御：在交换机（管理型）端口上做动态MAC地址绑定\n2）伪装DHCP 服务器攻击： hack通过将自己部署的DHCP服务器，为客户及提供非法IP\n防御：在交换机上（管理型），除合法的DHCP服务器所在的接口外，全部设置为禁止发送DHCP Offer包\n四、DNS部署与安全 DNS Domain Name Service（域名服务）作用：为客户机提供域名解析服务\n域名组成 www.baidu.com.\r. 为根域\r.com 为顶级域\rbaidu 为一级域名\rwww 为主机名 FQDN=主机名.DNS后缀\rFQDN（完整合格的域名） 监听端口 TCP53\rUDP53 DNS解析种类 1、按查询方式分类 1）迭代查询\n2）递归查询\n2、按查询内容分类 1）正向解析：已知域名，解析IP地址\n2）反向解析：已知IP地址，解析域名\n五、信息收集 1、ip信息收集 2、域名信息收集 收集子域名\n3、服务器信息收集 收集常用端口号\n4、网站信息收集 谷歌搜索语法 site功能：搜索指定的域名网页内容，子网和网页相关的 site:网站 “你要的信息” site:zhihu.com“web安全”\nfiletype功能：搜索指定的文件类型 filetype:pdf “你要的信息” filetype:ppt“你要的信息” site:zhihu.com filetype:pdf“你要的信息”\t———在zhihu网站里搜索pdf\ninurl功能：搜索url网址存在特定关键字的网页，可以用来搜寻有注入点的网站 inurl:.php?id=\t——搜索网址中有“php?id”的网页 inurl:view.php=?\t——搜索网址中有“view.php=”的网页 inurl:.jsp?id=\t——搜索网址中有“.jsp?id”的网页 inurl:.asp?id=\t——搜索网址中有“asp?id”的网页 inurl:/admin/login.php\t——搜索网址中有“/admin/login.php”的网页 inurl:login\t——搜索网址中有“login”的网页\nintitle功能：搜索标题存在特定关键字的网页 intitle：后台登录\t——搜索网址中是“后台登录”的网页 intitle：后台登录 filetype:php\t——搜索网址中是“后台登录”的php网页 intitle：index of “keymord”\t——搜索网址中关键字“keymord”的网页 intitle：index of “parent directory”\t——搜索根目录 相关的索引目录信息 intitle：index of “password”\t——搜索密码相关的索引目录信息 intitle：index of “login”\t——搜索登录页面的信息 intitle：index of “admin”\t——搜索后台登录页面信息\nintext功能：搜索正文存在特定关键字的网页 intext：powered by Discuz\t——搜索Discuz论坛相关的页面 intext：powered by wordpress\t——搜索wordpress制作的博客网址 intext：powered by cms\t——搜索CMS相关的页面 intext：powered by xxx inurl：login\t——搜索此类网址的后台登录页面\n网站容器（nmap扫描） 扫描一般用的： （1）主机发现：nmap -sn 地址/24\r（2）端口扫描：nmap -sS 地址\r（3）系统扫描：nmap -o 地址\r（4）版本扫描：nmap -sV 地址\r（5）综合扫描：nmap -A 地址 数据库类型 常见搭配：\rASP 和 ASPX 网站搭建：ACCESS、SQL Server （数据库）\rPHP 网站搭建：MySQL、PostgreSQL （数据库）\rJSP 网站搭建：Oracle、MySQL （数据库） 敏感目录爆破 1、dirb工具，2、御剑，3、7KBwebpathBurute\n","date":"2023-05-26T22:19:13+08:00","permalink":"https://hellciw.github.io/post/%E7%BD%91%E5%AE%89%E5%AD%A6%E4%B9%A0/","section":"post","tags":null,"title":" 网安学习"},{"categories":["ICMP"],"contents":" Q: 在icmp数据报中的标识符 Identifier (BE): 512 (0x0200) Identifier (LE): 2 (0x0002)这两个标识符有什么区别，有什么用，说个例子解释一下\n这两个标识符都是 ICMP 报文中的标识符字段，用于标识发送方发送的 ICMP 报文。区别在于 BE 和 LE 分别代表大端序和小端序，即字节序的不同。\n在网络通信中，不同的计算机可能使用不同的字节序，因此需要在传输数据时进行字节序的转换，以保证数据的正确性。在 ICMP 报文中，标识符字段是一个 16 位的无符号整数，因此需要在传输时进行字节序的转换。\n例如，当一个大端序的计算机向一个小端序的计算机发送 ICMP 报文时，标识符字段需要进行字节序的转换，将 BE 的值 512 转换为 LE 的值 2。这样接收方才能正确地识别发送方发送的 ICMP 报文。\n总之，标识符字段的作用是用于标识发送方发送的 ICMP 报文，而 BE 和 LE 则是用于表示不同字节序的标识符值，以保证数据在网络传输中的正确性。\n","date":"2023-05-26T22:19:13+08:00","permalink":"https://hellciw.github.io/post/icmp%E6%95%B0%E6%8D%AE%E6%8A%A5/","section":"post","tags":null,"title":"ICMP数据报Identifier中BE和LE的区别"},{"categories":["Linux"],"contents":"在Linux中，有多种方式可以设置开机自启动。以下是几种常见的方式：\n使用init.d或rc.d脚本：在/etc/init.d/或/etc/rc.d/目录中，你可以创建一个启动脚本，并使用特定的命名约定（如以\u0026quot;S\u0026quot;开头并在其后跟一个数字来定义启动顺序）。这些脚本将在系统引导过程中自动执行。例如，你可以将启动脚本放在/etc/init.d/myscript，然后使用以下命令将其添加到启动过程中：\nsudo chmod +x /etc/init.d/myscript\rsudo update-rc.d myscript defaults 使用systemd服务：systemd是用于管理系统进程和服务的初始化系统。你可以创建一个自定义的systemd服务单元文件，将其放置在/etc/systemd/system/目录中，并使用systemctl命令启用它。例如，你可以创建一个名为myservice.service的服务单元文件，然后使用以下命令启用它：\nsudo systemctl enable myservice.service 使用cron作业：cron是Linux系统中的定时任务管理器。你可以编辑cron表以指定在系统引导时运行的命令或脚本。使用crontab -e命令编辑当前用户的cron表，并添加一个@reboot行来指定在系统引导时执行的命令。例如：\n@reboot /path/to/myscript.sh 请注意，以上这些方法可能在不同的Linux发行版中略有差异。因此，你可能需要根据你所使用的特定发行版进行适当的调整。\n","date":"2023-05-26T22:19:13+08:00","permalink":"https://hellciw.github.io/post/linux%E8%87%AA%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F/","section":"post","tags":null,"title":"Linux自启动方式"},{"categories":["HTTP"],"contents":"图解HTTP HTTP协议的职责（客户端） 生成针对目标web服务器的HTTP请求报文\nTCP协议的职责（客户端） 为了方便通信，将HTTP请求报文分割成报文段按序号分成多个报文段，把每个报文段可靠地传给对方\nIP协议的职责（路由器） 搜索对方的地址，一边中转一边传送\nTCP协议的职责（服务器） 从对方接受到的报文段按序号以原来的顺序重组请求报文\nHTTP协议的职责（服务器） 对web服务器请求的内容处理 ，请求的处理结果按照TCP/IP通信协议向用户进行回传\nURL（Uniform Resource Identifier） 某个协议方案表示的资源的定位标识符\nUniform 规定统一的格式可方便处理多种不同类型的资源，而不用根据上下文环境来识别资源指定的访问方式。另外加入新的协议方案如:http、ftp也容易\nResource 资源定义是可标识的如何东西。资源不仅仅是单一的，也可以是多数的集合体。\nIdentifier 表示可标识的对象，也称为标识符\n告知服务器意图的HTTP方法 GET 获得资源，get方法用来请求访问已被URI识别的资源\nPOST 用来传输实体的主体，虽然GET方法也可以传输实体的主体，但一般不用GET方法进行传输，而是用post\nPUT 传输文件，就像ftp协议的文件上传，要求请求报文的主体中包含文件内容，然后保存在请求URI指定的位置。但是鉴于HTTP/1.1的PUT自身不带有验证机制，任何人都能上传，存在安全问题，因此一般web网站不采用这种方法\nHEAD HEAD方法和GET方法一样，只是不返回报文主体，用于确认URI的有效性及资源更新的日期时间等\nDELETE 和PUT相反的方法，但一般网站不带有验证机制，所以也不使用该方法，当配合web应用程序的验证机制，或遵守REST标准时还是有可能开放使用（PUT同）\nOPTIONS 用来查询针对请求URI指定的资源支持的方法\n“你支持什么方法”“支持GET和HEAD方法”\nTRACE 追踪路径，让web服务器端将之前的请求通信环回给客户端的方法。但是TRACE方法本来不怎么常用，再加上它容易引发XST（Cross Site Tracing,跨站追踪）攻击，通常更不会使用了。\nCONNECT 要求使用隧道协议连接代理。要求在与代理服务器通信时建立隧道，实现隧道协议进行TCP通信。主要使用SSL（安全套接层）和TLS（传输层安全）协议把通信内容加密后经网络隧道传输 CONNECT方法格式如下\nCONNECT 代理服务器名:端口号 HTTP版本\n常用内容编码 gzip（GUN zip） compress（UNIX系统的标准压缩） deflate（zlib） identity（不进行编码） WireShark学习 根据“计算机网络实验.cap”回答以下问题： 1、 第 1 个分组的源物理地址、目标物理地址、源 IP 地址、目的 IP 地址、每层的网络协议 类型、传递的信息内容是怎样的？ 2、 第 8 个分组的源物理地址、目标物理地址、源 IP 地址、目的 IP 地址、每层的网络协议 类型、传递的信息内容是怎样的？ 3、 第 32 个分组的源物理地址、目标物理地址、源 IP 地址、目的 IP 地址、每层的网络协议 类型、传递的信息内容是怎样的？ 4、观察这个记录，以分组 184、73 为例，参考图 2 举例说明 DNS、HTTP 的下层支撑协议。 （重点说明 DNS、HTTP 分别使用那种传输层协议？）\nDHCP协议 自动分配方式：DHCP服务器可以为主机分配一个永久性的IP地址。当DHCP客户端第一次从DHCP服务端租用到一个IP地址时，就可以永久性的使用该IP地址。\nDHCP（Dynamic Host Configuration Protocol）协议也叫动态主机配置协议，主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。（地址池、作用域) 动态分配方式：DHCP服务器为主机分配一个具有时间限制的IP地址，当时间达到限制或者主机主动放弃该地址时，该地址才能被其他主机使用。 手动分配方式：客户端的IP地址由网络管理员指定，DHCP服务器只是将一个指定的IP地址告诉主机。 主要工作原理：DHCP采用UDP发送所有的数据包，主机发送请求到DHCP服务器的68号端口，DHCP服务器再把消息返回给主机的67号端口。\n1、源物理地址：00:25:11:4e:02:34，目标物理地址：ff:ff:ff:ff:ff:ff:ff，源ip地址：0.0.0.0，目标ip地址：255.255.255.255 每层协议：Ethernet、IP、UDP、DHCP，传递的内容是让网关分配ip地址\nARP协议 ARP协议（Address Resolution Protocol，地址解析协议）其主要用作将IP地址转换为以太网的MAC地址，在以太网协议中规定，同一局域网中的一台主机要和另一台主机进行直接通信，必须要知道目标主机的MAC地址。而在TCP/IP协议栈中，网络层和传输层只关心目标主机的IP地址。这就导致在以太网中使用IP协议时，数据链路层的以太网协议接到上层IP协议提供的数据中，只包含目的主机的IP地址。于是需要一种方法，根据目的主机的IP地址，获得其MAC地址。这就是ARP协议要做的事情。所谓地址解析（address resolution）就是主机在发送帧前将目标IP地址转换成目标MAC地址的过程。\n2、源物理地址：00:25:11:4e:02:34，目标物理地址：ff:ff:ff:ff:ff:ff，源ip地址：0.0.0.0，目标ip地址：255.255.255.255 每层协议：Ethernet、ARP，传递的内容是将IP地址解析为物理地址。\nHTTP协议 HTTP协议（Hypertext Transfer Protocol，超文本传输协议）是用于从WWW服务器传输超文本到本地浏览器的传送协议。它可以使浏览器更加高效，使网络传输减少。\n3、源物理地址：00:25:11:4e:02:34，目标物理地址：00:04:96:10:64:30，源ip地址：219.222.170.14，目标ip地址：172.30.0.19 每层协议：Ethernet、IP、TCP、HTTP，传递的内容是访问东莞理工网络中心window服务\n4、以184分组、73分组为例，DNS、HTTP 的下层支撑协议分别是TCP、UDP。（DNS、HTTP为应用层协议，TCP、UDP为传输层协议)\n数据链路层 路由器只需要实现三层，即网络层、链路层、物理层。可以看作数据在同一层上面传输。\n数据链路层的三个重要问题：\n封装成帧、差错检测、可靠传输\n封装成帧 给一段数据前后分别加上首部和尾部，便于接收端从比特流中辨认帧的开始和结束位置\n差错检验 1、奇偶校验 漏检率高，计算机网络一般不采用\n奇偶校验是一种简单的差错检验方法，它可以检测数据传输过程中的单比特差错。在奇偶校验中，发送方在每个数据块的末尾添加一个附加比特，使得整个数据块中1的个数为奇数或偶数。接收方在接收到数据块后，也会计算数据块中1的个数，如果计算结果与发送方添加的附加比特不一致，则说明数据传输过程中发生了差错。 例如，假设发送方要发送一个8位的数据块10110110，使用奇偶校验进行差错检验，可以在数据块末尾添加一个附加比特，使得整个数据块中1的个数为偶数，因此添加的附加比特为0，发送的数据块变为101101100。接收方接收到数据块后，计算数据块中1的个数为4，与发送方添加的附加比特0一致，说明数据传输过程中没有发生差错。 奇偶校验虽然简单，但只能检测单比特差错，对于多比特差错或数据重复等差错无法检测。\n2、循环冗余校验 它通过对数据进行多项式运算来生成一个校验码，然后将该校验码附加到数据末尾进行传输。接收方在接收到数据后，也进行多项式运算，生成一个校验码，并将其与接收到的校验码进行比较。如果两个校验码不匹配，则说明数据传输中出现了错误。 CRC算法的基本思想是将数据看作一个二进制数，然后将该数与一个预设的生成多项式进行除法运算，得到余数作为校验码。在发送端，将数据和校验码一起传输；在接收端，接收到数据后，再进行一次除法运算，得到余数，并将其与接收到的校验码进行比较，以判断数据是否正确。 CRC算法的优点是能够检测多种类型的错误，包括单比特错误、双比特错误和突发错误。它也比其他校验算法更加高效，因为它可以使用硬件电路来实现，而不需要进行复杂的计算。\n可靠传输 常见的实现可靠传输的方法包括：\n停止-等待协议：发送方发送数据后等待接收方的确认，接收方收到数据后发送确认，发送方收到确认后再发送下一个数据。\n滑动窗口协议：发送方和接收方都维护一个窗口，发送方只能发送窗口内的数据，接收方只能接收窗口内的数据，通过滑动窗口来实现流量控制和拥塞控制。\nARQ协议：自动重传请求协议，当接收方发现数据出错时，会发送一个请求重传的消息给发送方，发送方会重新发送数据。\nFEC编码：前向纠错编码，通过在数据中添加冗余信息来检测和纠正错误，提高数据传输的可靠性。\n数据校验：在数据传输过程中添加校验码，接收方通过校验码来检测数据是否出错，如果出错则要求发送方重新发送数据。\n这些方法可以单独使用，也可以组合使用，以提高数据传输的可靠性和效率。\nPPP协议 点对点协议PPP(Point-Point Protocol)是目前使用最广泛的点对点数据链路层协议\n","date":"2023-05-18T22:19:13+08:00","permalink":"https://hellciw.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/","section":"post","tags":null,"title":"图解HTTP"},{"categories":null,"contents":" 月白星辰挂长空；萦绕悠扬寂寥风。 舞琴弄墨各不同；骑马过海踏天虹。 这个博客会写一些学习心得，和生活随笔。 有时候会很懒，心情也会不固定，时晴时雨，就想写博客记录自己的生活。\n曾经有个笔名叫幻天林少，还写过小说，当时还是太天真了，不过还是算一个能在互联网搜索到的男人了，做一个自己的小小天地，在互联网这个世界中留下自己的印记。\n这个博客开始于2023年5月~~~\n学习c语言快速入门，推荐一个文章：\nhttps://blog.csdn.net/weixin_46531416/article/details/120171796\n","date":"2023-05-01T20:18:54+03:00","permalink":"https://hellciw.github.io/about/","section":"","tags":null,"title":"About Me"},{"categories":["Vue"],"contents":"Vue学习笔记 一、二维数组尝试 var vm = new Vue({ el: \u0026#34;#app\u0026#34;, data: { huilv:[ [6.8540, 132.9787, 1298.7013, 1.3278], [6.8540, 132.9787, 1298.7013, 1.3278] ],} 二、watch监听实现 watch: {\rfirst: function(newValue) {\rthis.second = newValue * this.huilv[Number(this.firstbutton - 1)][Number(this.secondbutton -1)];\r},\rsecond: function(newValue) {\rthis.first = newValue / this.huilv[Number(this.firstbutton - 1)][Number(this.secondbutton -1)];\r}\r} 三、数组的更新检测 #变更方法 Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：\npush() pop() shift() unshift() splice() sort() reverse() 你可以打开控制台，然后对前面例子的 items 数组尝试调用变更方法。比如 example1.items.push({ message: 'Baz' })。\n四、链接数据库 页面调用路由表的函数\ngetmessage() { const self = this; self.$http.post(\u0026#39;/api/user/getchat\u0026#39;).then(function(response) { console.log(response.data); self.messages = response.data; }).catch(function(error) { console.log(error); }); }, 路由表内的接口\nrouter.post(\u0026#39;/getchat\u0026#39;, (req, res) =\u0026gt; { const sql = $sql.userchat.getmessage; conn.query(sql, (err, result) =\u0026gt; { if (err) { console.log(err); res.json({ success: false, message: \u0026#39;Database error occurred.\u0026#39; }); return; } console.log(result); // 在控制台上打印查找到的结果 res.json(result); // 将查询结果返回给客户端 }); }); ","date":"2023-05-01T22:19:13+08:00","permalink":"https://hellciw.github.io/post/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","section":"post","tags":null,"title":"Vue项目学习"}]